{"/home/travis/build/npmtest/node-npmtest-orchestrator/test.js":"/* istanbul instrument in package npmtest_orchestrator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-orchestrator/lib.npmtest_orchestrator.js":"/* istanbul instrument in package npmtest_orchestrator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_orchestrator = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_orchestrator = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-orchestrator/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-orchestrator && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_orchestrator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_orchestrator\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_orchestrator.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_orchestrator.rollup.js'] =\n            local.assetsDict['/assets.npmtest_orchestrator.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_orchestrator.__dirname + '/lib.npmtest_orchestrator.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-orchestrator/node_modules/orchestrator/index.js":"/*jshint node:true */\r\n\r\n\"use strict\";\r\n\r\nvar util = require('util');\r\nvar events = require('events');\r\nvar EventEmitter = events.EventEmitter;\r\nvar runTask = require('./lib/runTask');\r\n\r\nvar Orchestrator = function () {\r\n\tEventEmitter.call(this);\r\n\tthis.doneCallback = undefined; // call this when all tasks in the queue are done\r\n\tthis.seq = []; // the order to run the tasks\r\n\tthis.tasks = {}; // task objects: name, dep (list of names of dependencies), fn (the task to run)\r\n\tthis.isRunning = false; // is the orchestrator running tasks? .start() to start, .stop() to stop\r\n};\r\nutil.inherits(Orchestrator, EventEmitter);\r\n\r\n\tOrchestrator.prototype.reset = function () {\r\n\t\tif (this.isRunning) {\r\n\t\t\tthis.stop(null);\r\n\t\t}\r\n\t\tthis.tasks = {};\r\n\t\tthis.seq = [];\r\n\t\tthis.isRunning = false;\r\n\t\tthis.doneCallback = undefined;\r\n\t\treturn this;\r\n\t};\r\n\tOrchestrator.prototype.add = function (name, dep, fn) {\r\n\t\tif (!fn && typeof dep === 'function') {\r\n\t\t\tfn = dep;\r\n\t\t\tdep = undefined;\r\n\t\t}\r\n\t\tdep = dep || [];\r\n\t\tfn = fn || function () {}; // no-op\r\n\t\tif (!name) {\r\n\t\t\tthrow new Error('Task requires a name');\r\n\t\t}\r\n\t\t// validate name is a string, dep is an array of strings, and fn is a function\r\n\t\tif (typeof name !== 'string') {\r\n\t\t\tthrow new Error('Task requires a name that is a string');\r\n\t\t}\r\n\t\tif (typeof fn !== 'function') {\r\n\t\t\tthrow new Error('Task '+name+' requires a function that is a function');\r\n\t\t}\r\n\t\tif (!Array.isArray(dep)) {\r\n\t\t\tthrow new Error('Task '+name+' can\\'t support dependencies that is not an array of strings');\r\n\t\t}\r\n\t\tdep.forEach(function (item) {\r\n\t\t\tif (typeof item !== 'string') {\r\n\t\t\t\tthrow new Error('Task '+name+' dependency '+item+' is not a string');\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.tasks[name] = {\r\n\t\t\tfn: fn,\r\n\t\t\tdep: dep,\r\n\t\t\tname: name\r\n\t\t};\r\n\t\treturn this;\r\n\t};\r\n\tOrchestrator.prototype.task = function (name, dep, fn) {\r\n\t\tif (dep || fn) {\r\n\t\t\t// alias for add, return nothing rather than this\r\n\t\t\tthis.add(name, dep, fn);\r\n\t\t} else {\r\n\t\t\treturn this.tasks[name];\r\n\t\t}\r\n\t};\r\n\tOrchestrator.prototype.hasTask = function (name) {\r\n\t\treturn !!this.tasks[name];\r\n\t};\r\n\t// tasks and optionally a callback\r\n\tOrchestrator.prototype.start = function() {\r\n\t\tvar args, arg, names = [], lastTask, i, seq = [];\r\n\t\targs = Array.prototype.slice.call(arguments, 0);\r\n\t\tif (args.length) {\r\n\t\t\tlastTask = args[args.length-1];\r\n\t\t\tif (typeof lastTask === 'function') {\r\n\t\t\t\tthis.doneCallback = lastTask;\r\n\t\t\t\targs.pop();\r\n\t\t\t}\r\n\t\t\tfor (i = 0; i < args.length; i++) {\r\n\t\t\t\targ = args[i];\r\n\t\t\t\tif (typeof arg === 'string') {\r\n\t\t\t\t\tnames.push(arg);\r\n\t\t\t\t} else if (Array.isArray(arg)) {\r\n\t\t\t\t\tnames = names.concat(arg); // FRAGILE: ASSUME: it's an array of strings\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error('pass strings or arrays of strings');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.isRunning) {\r\n\t\t\t// reset specified tasks (and dependencies) as not run\r\n\t\t\tthis._resetSpecificTasks(names);\r\n\t\t} else {\r\n\t\t\t// reset all tasks as not run\r\n\t\t\tthis._resetAllTasks();\r\n\t\t}\r\n\t\tif (this.isRunning) {\r\n\t\t\t// if you call start() again while a previous run is still in play\r\n\t\t\t// prepend the new tasks to the existing task queue\r\n\t\t\tnames = names.concat(this.seq);\r\n\t\t}\r\n\t\tif (names.length < 1) {\r\n\t\t\t// run all tasks\r\n\t\t\tfor (i in this.tasks) {\r\n\t\t\t\tif (this.tasks.hasOwnProperty(i)) {\r\n\t\t\t\t\tnames.push(this.tasks[i].name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tseq = [];\r\n\t\ttry {\r\n\t\t\tthis.sequence(this.tasks, names, seq, []);\r\n\t\t} catch (err) {\r\n\t\t\t// Is this a known error?\r\n\t\t\tif (err) {\r\n\t\t\t\tif (err.missingTask) {\r\n\t\t\t\t\tthis.emit('task_not_found', {message: err.message, task:err.missingTask, err: err});\r\n\t\t\t\t}\r\n\t\t\t\tif (err.recursiveTasks) {\r\n\t\t\t\t\tthis.emit('task_recursion', {message: err.message, recursiveTasks:err.recursiveTasks, err: err});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.stop(err);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tthis.seq = seq;\r\n\t\tthis.emit('start', {message:'seq: '+this.seq.join(',')});\r\n\t\tif (!this.isRunning) {\r\n\t\t\tthis.isRunning = true;\r\n\t\t}\r\n\t\tthis._runStep();\r\n\t\treturn this;\r\n\t};\r\n\tOrchestrator.prototype.stop = function (err, successfulFinish) {\r\n\t\tthis.isRunning = false;\r\n\t\tif (err) {\r\n\t\t\tthis.emit('err', {message:'orchestration failed', err:err});\r\n\t\t} else if (successfulFinish) {\r\n\t\t\tthis.emit('stop', {message:'orchestration succeeded'});\r\n\t\t} else {\r\n\t\t\t// ASSUME\r\n\t\t\terr = 'orchestration aborted';\r\n\t\t\tthis.emit('err', {message:'orchestration aborted', err: err});\r\n\t\t}\r\n\t\tif (this.doneCallback) {\r\n\t\t\t// Avoid calling it multiple times\r\n\t\t\tthis.doneCallback(err);\r\n\t\t} else if (err && !this.listeners('err').length) {\r\n\t\t\t// No one is listening for the error so speak louder\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t};\r\n\tOrchestrator.prototype.sequence = require('sequencify');\r\n\tOrchestrator.prototype.allDone = function () {\r\n\t\tvar i, task, allDone = true; // nothing disputed it yet\r\n\t\tfor (i = 0; i < this.seq.length; i++) {\r\n\t\t\ttask = this.tasks[this.seq[i]];\r\n\t\t\tif (!task.done) {\r\n\t\t\t\tallDone = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn allDone;\r\n\t};\r\n\tOrchestrator.prototype._resetTask = function(task) {\r\n\t\tif (task) {\r\n\t\t\tif (task.done) {\r\n\t\t\t\ttask.done = false;\r\n\t\t\t}\r\n\t\t\tdelete task.start;\r\n\t\t\tdelete task.stop;\r\n\t\t\tdelete task.duration;\r\n\t\t\tdelete task.hrDuration;\r\n\t\t\tdelete task.args;\r\n\t\t}\r\n\t};\r\n\tOrchestrator.prototype._resetAllTasks = function() {\r\n\t\tvar task;\r\n\t\tfor (task in this.tasks) {\r\n\t\t\tif (this.tasks.hasOwnProperty(task)) {\r\n\t\t\t\tthis._resetTask(this.tasks[task]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tOrchestrator.prototype._resetSpecificTasks = function (names) {\r\n\t\tvar i, name, t;\r\n\r\n\t\tif (names && names.length) {\r\n\t\t\tfor (i = 0; i < names.length; i++) {\r\n\t\t\t\tname = names[i];\r\n\t\t\t\tt = this.tasks[name];\r\n\t\t\t\tif (t) {\r\n\t\t\t\t\tthis._resetTask(t);\r\n\t\t\t\t\tif (t.dep && t.dep.length) {\r\n\t\t\t\t\t\tthis._resetSpecificTasks(t.dep); // recurse\r\n\t\t\t\t\t}\r\n\t\t\t\t//} else {\r\n\t\t\t\t\t// FRAGILE: ignore that the task doesn't exist\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tOrchestrator.prototype._runStep = function () {\r\n\t\tvar i, task;\r\n\t\tif (!this.isRunning) {\r\n\t\t\treturn; // user aborted, ASSUME: stop called previously\r\n\t\t}\r\n\t\tfor (i = 0; i < this.seq.length; i++) {\r\n\t\t\ttask = this.tasks[this.seq[i]];\r\n\t\t\tif (!task.done && !task.running && this._readyToRunTask(task)) {\r\n\t\t\t\tthis._runTask(task);\r\n\t\t\t}\r\n\t\t\tif (!this.isRunning) {\r\n\t\t\t\treturn; // task failed or user aborted, ASSUME: stop called previously\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.allDone()) {\r\n\t\t\tthis.stop(null, true);\r\n\t\t}\r\n\t};\r\n\tOrchestrator.prototype._readyToRunTask = function (task) {\r\n\t\tvar ready = true, // no one disproved it yet\r\n\t\t\ti, name, t;\r\n\t\tif (task.dep.length) {\r\n\t\t\tfor (i = 0; i < task.dep.length; i++) {\r\n\t\t\t\tname = task.dep[i];\r\n\t\t\t\tt = this.tasks[name];\r\n\t\t\t\tif (!t) {\r\n\t\t\t\t\t// FRAGILE: this should never happen\r\n\t\t\t\t\tthis.stop(\"can't run \"+task.name+\" because it depends on \"+name+\" which doesn't exist\");\r\n\t\t\t\t\tready = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (!t.done) {\r\n\t\t\t\t\tready = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ready;\r\n\t};\r\n\tOrchestrator.prototype._stopTask = function (task, meta) {\r\n\t\ttask.duration = meta.duration;\r\n\t\ttask.hrDuration = meta.hrDuration;\r\n\t\ttask.running = false;\r\n\t\ttask.done = true;\r\n\t};\r\n\tOrchestrator.prototype._emitTaskDone = function (task, message, err) {\r\n\t\tif (!task.args) {\r\n\t\t\ttask.args = {task:task.name};\r\n\t\t}\r\n\t\ttask.args.duration = task.duration;\r\n\t\ttask.args.hrDuration = task.hrDuration;\r\n\t\ttask.args.message = task.name+' '+message;\r\n\t\tvar evt = 'stop';\r\n\t\tif (err) {\r\n\t\t\ttask.args.err = err;\r\n\t\t\tevt = 'err';\r\n\t\t}\r\n\t\t// 'task_stop' or 'task_err'\r\n\t\tthis.emit('task_'+evt, task.args);\r\n\t};\r\n\tOrchestrator.prototype._runTask = function (task) {\r\n\t\tvar that = this;\r\n\r\n\t\ttask.args = {task:task.name, message:task.name+' started'};\r\n\t\tthis.emit('task_start', task.args);\r\n\t\ttask.running = true;\r\n\r\n\t\trunTask(task.fn.bind(this), function (err, meta) {\r\n\t\t\tthat._stopTask.call(that, task, meta);\r\n\t\t\tthat._emitTaskDone.call(that, task, meta.runMethod, err);\r\n\t\t\tif (err) {\r\n\t\t\t\treturn that.stop.call(that, err);\r\n\t\t\t}\r\n\t\t\tthat._runStep.call(that);\r\n\t\t});\r\n\t};\r\n\r\n// FRAGILE: ASSUME: this list is an exhaustive list of events emitted\r\nvar events = ['start','stop','err','task_start','task_stop','task_err','task_not_found','task_recursion'];\r\n\r\nvar listenToEvent = function (target, event, callback) {\r\n\ttarget.on(event, function (e) {\r\n\t\te.src = event;\r\n\t\tcallback(e);\r\n\t});\r\n};\r\n\r\n\tOrchestrator.prototype.onAll = function (callback) {\r\n\t\tvar i;\r\n\t\tif (typeof callback !== 'function') {\r\n\t\t\tthrow new Error('No callback specified');\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < events.length; i++) {\r\n\t\t\tlistenToEvent(this, events[i], callback);\r\n\t\t}\r\n\t};\r\n\r\nmodule.exports = Orchestrator;\r\n","/home/travis/build/npmtest/node-npmtest-orchestrator/node_modules/orchestrator/lib/runTask.js":"/*jshint node:true */\r\n\r\n\"use strict\";\r\n\r\nvar eos = require('end-of-stream');\r\nvar consume = require('stream-consume');\r\n\r\nmodule.exports = function (task, done) {\r\n\tvar that = this, finish, cb, isDone = false, start, r;\r\n\r\n\tfinish = function (err, runMethod) {\r\n\t\tvar hrDuration = process.hrtime(start);\r\n\r\n\t\tif (isDone && !err) {\r\n\t\t\terr = new Error('task completion callback called too many times');\r\n\t\t}\r\n\t\tisDone = true;\r\n\r\n\t\tvar duration = hrDuration[0] + (hrDuration[1] / 1e9); // seconds\r\n\r\n\t\tdone.call(that, err, {\r\n\t\t\tduration: duration, // seconds\r\n\t\t\thrDuration: hrDuration, // [seconds,nanoseconds]\r\n\t\t\trunMethod: runMethod\r\n\t\t});\r\n\t};\r\n\r\n\tcb = function (err) {\r\n\t\tfinish(err, 'callback');\r\n\t};\r\n\r\n\ttry {\r\n\t\tstart = process.hrtime();\r\n\t\tr = task(cb);\r\n\t} catch (err) {\r\n\t\treturn finish(err, 'catch');\r\n\t}\r\n\r\n\tif (r && typeof r.then === 'function') {\r\n\t\t// wait for promise to resolve\r\n\t\t// FRAGILE: ASSUME: Promises/A+, see http://promises-aplus.github.io/promises-spec/\r\n\t\tr.then(function () {\r\n\t\t\tfinish(null, 'promise');\r\n\t\t}, function(err) {\r\n\t\t\tfinish(err, 'promise');\r\n\t\t});\r\n\r\n\t} else if (r && typeof r.pipe === 'function') {\r\n\t\t// wait for stream to end\r\n\r\n\t\teos(r, { error: true, readable: r.readable, writable: r.writable && !r.readable }, function(err){\r\n\t\t\tfinish(err, 'stream');\r\n\t\t});\r\n\r\n\t\t// Ensure that the stream completes\r\n        consume(r);\r\n\r\n\t} else if (task.length === 0) {\r\n\t\t// synchronous, function took in args.length parameters, and the callback was extra\r\n\t\tfinish(null, 'sync');\r\n\r\n\t//} else {\r\n\t\t// FRAGILE: ASSUME: callback\r\n\r\n\t}\r\n};\r\n"}